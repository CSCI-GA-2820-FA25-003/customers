"""
Models for Customers

All of the models are stored in this module
"""

import uuid
import logging
from datetime import datetime
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy import CheckConstraint, Index
from sqlalchemy.exc import IntegrityError

logger = logging.getLogger("flask.app")

# Create the SQLAlchemy object to be initialized later in init_db()
db = SQLAlchemy()


class DataValidationError(Exception):
    """Used for data validation errors when persisting/deserializing"""


class Customers(db.Model):
    """
    Class that represents a customer
    """

    __tablename__ = "customers"

    ##################################################
    # Table Schema
    ##################################################
    id = db.Column(
        UUID(as_uuid=True),
        primary_key=True,
        default=uuid.uuid4,  # generated by server/app on insert
        nullable=False,
    )
    first_name = db.Column(db.String(50), nullable=False)
    last_name = db.Column(db.String(50), nullable=False)
    address = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, nullable=False, server_default=db.func.now())
    updated_at = db.Column(
        db.DateTime,
        nullable=False,
        server_default=db.func.now(),
        onupdate=db.func.now(),
    )

    __table_args__ = (
        # CHECK: address after trim must not be empty
        CheckConstraint(
            "length(btrim(address)) > 0", name="ck_customers_address_not_blank"
        ),
        # composite index for faster full-name search
        Index("idx_customers_full_name", "last_name", "first_name"),
    )

    ##################################################
    # Instance methods
    ##################################################
    def __repr__(self):
        return f"<Customer {self.first_name} {self.last_name} id=[{self.id}]>"

    def create(self):
        """
        Persists the customer to the database
        """
        logger.info("Creating customer %s %s", self.first_name, self.last_name)
        try:
            db.session.add(self)
            db.session.commit()
        except (IntegrityError, Exception) as e:
            db.session.rollback()
            logger.error("Error creating record: %s", self)
            raise DataValidationError(e) from e

    def update(self):
        """
        Updates a customer in the database
        """
        if not self.id:
            raise DataValidationError("Update called with empty 'id'")
        logger.info("Updating customer %s %s", self.first_name, self.last_name)
        try:
            db.session.commit()
        except (IntegrityError, Exception) as e:
            db.session.rollback()
            logger.error("Error updating record: %s", self)
            raise DataValidationError(e) from e

    def delete(self):
        """Removes a customer from the data store"""
        if not self.id:
            raise DataValidationError("Delete called with empty 'id'")
        logger.info("Deleting customer %s %s", self.first_name, self.last_name)
        try:
            db.session.delete(self)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            logger.error("Error deleting record: %s", self)
            raise DataValidationError(e) from e

    def serialize(self):
        """Serializes a customer into a dictionary"""
        return {
            "id": str(self.id) if self.id else None,
            "first_name": self.first_name,
            "last_name": self.last_name,
            "address": self.address,
            "created_at": (
                self.created_at.isoformat()
                if isinstance(self.created_at, datetime)
                else None
            ),
            "updated_at": (
                self.updated_at.isoformat()
                if isinstance(self.updated_at, datetime)
                else None
            ),
        }

    def deserialize(self, data: dict):
        """
        Deserializes a customer from a dictionary

        Args:
            data (dict): A dictionary containing the resource data
        """
        try:
            first_name = data["first_name"]
            last_name = data["last_name"]
            address = data["address"]
        except AttributeError as error:
            raise DataValidationError("Invalid attribute: " + error.args[0]) from error
        except KeyError as error:
            raise DataValidationError(
                "Invalid customers: missing " + error.args[0]
            ) from error
        except TypeError as error:
            raise DataValidationError(
                "Invalid Customers: body of request contained bad or no data "
                + str(error)
            ) from error

        if isinstance(first_name, str):
            first_name = first_name.strip()
        if isinstance(last_name, str):
            last_name = last_name.strip()
        if isinstance(address, str):
            address = address.strip()

        if not first_name:
            raise DataValidationError("first_name must be non-empty")
        if not last_name:
            raise DataValidationError("last_name must be non-empty")
        if not address:
            # Mirrors DB CHECK on address
            raise DataValidationError("address must be non-empty")

        self.first_name = first_name
        self.last_name = last_name
        self.address = address
        return self

    ##################################################
    # CLASS METHODS
    ##################################################

    @classmethod
    def all(cls):
        """Returns all of the customers in the database"""
        logger.info("Processing all customers")
        return cls.query.all()

    @classmethod
    def find(cls, by_id):
        """Finds a customer by its ID"""
        logger.info("Processing lookup for id %s ...", by_id)
        return cls.query.session.get(cls, by_id)

    @classmethod
    def find_by_first_name(cls, first_name: str, fuzzy: bool = True):
        """Returns all customers whose first_name matches"""
        logger.info("Processing first_name query for %s ...", first_name)
        token = first_name.strip()
        if fuzzy:
            return cls.query.filter(cls.first_name.ilike(f"%{token}%"))
        return cls.query.filter(cls.first_name == token)

    @classmethod
    def find_by_last_name(cls, last_name: str, fuzzy: bool = True):
        """Returns all customers whose last_name matches"""
        logger.info("Processing last_name query for %s ...", last_name)
        token = last_name.strip()
        if fuzzy:
            return cls.query.filter(cls.last_name.ilike(f"%{token}%"))
        return cls.query.filter(cls.last_name == token)

    @classmethod
    def find_by_name(cls, name: str, fuzzy: bool = True):
        """Find customers by name.
        Cases handled:
        1. Single token -> search both first and last
        2. Two tokens (First Last) -> full name match
        3. More than two tokens -> match first and last (ignore middle)
        """
        logger.info("Processing name query for %s ...", name)
        parts = name.strip().split()

        if not parts:
            # Empty input, return empty result
            return cls.query.filter(cls.id.is_(None))

        # Case 1: Single token -> search both
        if len(parts) == 1:
            token = parts[0]
            first_matches = cls.find_by_first_name(token, fuzzy=fuzzy)
            last_matches = cls.find_by_last_name(token, fuzzy=fuzzy)
            return first_matches.union(last_matches)

        # Case 2: Two parts (First Last)
        elif len(parts) == 2:
            first, last = parts
            if fuzzy:
                return cls.query.filter(
                    cls.first_name.ilike(f"%{first.strip()}%"),
                    cls.last_name.ilike(f"%{last.strip()}%"),
                )
            return cls.query.filter(
                cls.first_name == first.strip(), cls.last_name == last.strip()
            )

        # Case 3: More than two -> take first and last
        else:
            first, last = parts[0], parts[-1]
            if fuzzy:
                return cls.query.filter(
                    cls.first_name.ilike(f"%{first.strip()}%"),
                    cls.last_name.ilike(f"%{last.strip()}%"),
                )
            return cls.query.filter(
                cls.first_name == first.strip(), cls.last_name == last.strip()
            )

    @classmethod
    def find_by_address(cls, address: str, fuzzy: bool = True):
        """Returns all customers whose address matches"""
        logger.info("Processing address query for %s ...", address)
        token = address.strip()
        if fuzzy:
            return cls.query.filter(cls.address.ilike(f"%{token}%"))
        return cls.query.filter(cls.address == token)
